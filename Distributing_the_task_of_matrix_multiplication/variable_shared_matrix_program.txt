Let there be two matrices A (n X m) and B (m X p). The product matrix C = A x B will be a n X p matrix where C[i,j], 1 ≤ i ≤ n, 1 ≤ j ≤ p  =  ith row of A . jth column of B = 

Write a complete user-friendly C program that reads two matrices A (n X m) and B (m X p) from the user in arrays  a[ ][ ] and b[ ][ ], respectively. The program then creates n number of child processes such that each of these child processes computes one unique row of the product matrix C and saves that in the corresponding row of an array c[ ][ ]. For example, the 1st child process may compute the 1st row, that is, the elements  C[1,1],  C[1,2], ..., C[1,p] and stores them in c[0][0], c[0][1], ..., c[0][p-1], respectively;  the 2nd child process may compute C[2,1], C[2,2], ..., C[2,p]  and stores them in c[1][0], c[1][1],, ..., c[1][p-1], and so on. Please note that the array c[ ][ ] has to be shared among  all of n (child) + 1 (parent) processes.

After all the child processes finish putting corresponding values in c[ ][ ], the parent process prints c[ ][ ] in the matrix form.



Your program(s) should arrange to release the shared memory that has been created during execution.

As enhancement of this assignment (not to be submitted today), we may conceive that this program has to be used for a series of such multiplications of matrices (of different sizes) to be done by a collection of cooperating processes.  That is, neither the parent process nor any of the child processes terminates after one such matrix multiplication. They can be reused to compute product matrix as long as the user desires. You have to propose and implement a scheme for this.